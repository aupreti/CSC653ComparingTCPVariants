import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from collections import defaultdict
import sys
import numpy as np
import pdb 

def graph(drop, lat, tp):
    filenames = ["Vegas/Vegas", "Reno/Reno", "Newreno/Reno", "Newreno/Vegas"]
    ylabels = ["# Dropped Packets", "Average Latency", "Average Throughput"]
    colors = ["red", "blue", "green", "purple"]
    data = [drop, lat, tp]
    for i, yl, c in zip(data, ylabels, colors):
        y_pos = np.arange(len(filenames))
        plt.bar(y_pos, i, align='center', color=c)
        plt.xticks(y_pos, filenames)
        plt.ylabel(yl)
        plt.title("{0} over range of Packet Sizes - 4Mbps, 10,000Byte Packet Size".format(yl))
        plt.savefig("Figures/{0}_v_Variants".format(yl))
        plt.clf()

def parse(filename):
    trace = open(filename, "r").readlines()
    #store each trace in a dictionary that can be indexed by the packet id 
    outputs = defaultdict(list)
    for each in trace:
        parts = each.split(" ")
        output = dict()
        output["event"] = parts[0]
        output["time"] = float(parts[1])
        output["from_node"] = parts[2]
        output["to_node"] = parts[3]
        output["p_type"] = parts[4]
        output["p_size"] = int(parts[5])
        p_id = int(parts[-1])
        output["fid"] = int(parts[-5])
        output["src_addr"] = float(parts[-4])
        output["dest_addr"] = float(parts[-3])
        outputs[p_id].append(output)

    #sort the outputs
    sorted_outputs = defaultdict(list)
    for k,v in outputs.items():
        newlist = sorted(v, key=lambda k: k['time']) 
        sorted_outputs[k] = newlist

    # compute throughput and keep track of drop rate
    drop_ctr_tcp = 0
    drop_ctr_cbr = 0

    latency_over_time_tcp=[]
    latency_over_time_cbr=[]

    sum_packet_size_tcp,sum_packet_size_cbr, smallest_tcp, smallest_cbr, biggest_tcp, biggest_cbr= 0,0, 100, 100, -5, -5

    for k, v in sorted_outputs.items():
        is_tcp_packet= (v[0]["p_type"]=='tcp')
        is_cbr_packet= (v[0]["p_type"]=='cbr')
        
        tp = -1 # if packet transmission incomplete
        trans_time = v[-1]["time"] - v[0]["time"]


        #handle packet drop
        drop_found = 0
        for value in v:
            if value["event"] == "d":
                if is_tcp_packet:
                    drop_ctr_tcp += 1
                elif is_cbr_packet:
                    drop_ctr_cbr+=1

                drop_found = 1
                break
            
        if drop_found == 1:
            continue

        #record data for both cbr and tcp
        if is_tcp_packet:
            latency_over_time_tcp.append(trans_time)
            sum_packet_size_tcp+=v[0]["p_size"]
            if v[0]["time"] < smallest_tcp:
                smallest_tcp = v[0]["time"]
            if v[-1]["time"] > biggest_tcp:
                biggest_tcp =  v[-1]["time"]

        elif is_cbr_packet:
        
            latency_over_time_cbr.append(trans_time)
            sum_packet_size_cbr=v[0]["p_size"]
            if v[0]["time"] < smallest_cbr:
                smallest_cbr = v[0]["time"]
            if v[-1]["time"] > biggest_cbr:
                biggest_cbr =  v[-1]["time"]
        
            

    average_througput_tcp = sum_packet_size_tcp/float(biggest_tcp-smallest_tcp)/1000000#throughput_sum/float(num_trans)/1000000
    average_througput_cbr = sum_packet_size_cbr/float(biggest_cbr-smallest_cbr)/1000000
    average_latency_tcp=sum(latency_over_time_tcp)/len(latency_over_time_tcp)
    average_latency_cbr=sum(latency_over_time_cbr)/len(latency_over_time_cbr)
    
    print "Average Throughput TCP= {0} Mbps".format(average_througput_tcp)
    print "Average Throughput CBR= {0} Mbps".format(average_througput_cbr)
    print "Average Latency TCP= {0} seconds".format(average_latency_tcp)
    print "Average Latency CBR= {0} seconds".format(average_latency_cbr)
    print "Latency over time TCP =%s" %(latency_over_time_tcp[:20])
    print "Latency over time CBR = %s" %(latency_over_time_cbr[:20])
    print "Drop Rate TCP= {0}".format(drop_ctr_tcp)
    print "Drop Rate CBR= {0}".format(drop_ctr_cbr)

    #return drop_rate, avg_lat, avg_tp
                

if __name__ == '__main__':
    size_range = [i for i in range(500, 10001, 2500)]
    rate_range = [i for i in range(1, 11)]
    filenames = ["Reno_DropTail.tr", "Reno_Red.tr", "Sack_DropTail.tr", "Sack_Red.tr"]
    dr = []
    al = []
    at = []
    
    for fname in filenames:
        variant = fname.split("_")[0]
        rate = 2
        packet_size = 1000
        print "\nVariant = {0}, Queue = {3}, Rate = {1}Mbps, Packet Size = {2}".format(variant, rate, packet_size, fname.split("_")[1])
        parse(fname)
        #drop_rate, avg_lat, avg_tp = parse(fname)
        
        # dr.append(drop_rate)
        # al.append(avg_lat)
        # at.append(avg_tp)

    #graph(dr, al, at)



    
